#!/bin/bash

##################################
#                                #
#   This file will               #
#   create project directories   #
#   based on string input from   #
#   the user as to what language #
#   the project will be in.      #
#                                #
##################################

#! Notes
#    Fix the rust environment creation with cargo.

HELP_MENU="\nThis script creates a new project, filling all needed files and directories.\ninpro <language name> <project directory>\n"

create_dirs () {
    LANGUAGE=$1
    DIRECTORY=$2

    if [[ $LANGUAGE == /dev/null ]]; then
	   exit
    fi

    if [ -d $DIRECTORY ]; then
        printf "\nDirectory exists."
    else
	if [[ $LANGUAGE != "rust" ]]; then
        	printf "\nDirectory does not exist. Creating directory."
        	mkdir $DIRECTORY
	else 
		printf "\nLanguage: Rust :no directory will be created."
	fi

        if [ -d $DIRECTORY ]; then
            printf "\nDirectory successfully created. Continuing process."
        else
            printf "\nNo directory created."
    
        fi
    fi

    #create the file system at the given directory for the supplied langage
    printf "\nCreating the directory for the language: $LANGUAGE at $DIRECTORY"

    case $LANGUAGE in
        html) # build the directory tree for the html language
            builtin cd $DIRECTORY
            mkdir src
            mkdir resources
            mkdir docs
            touch index.html
            touch src/index.js
	   touch resources/index.css
	   touch docs/notes.text
	   printf "\nInitiating node project..."
	   npm init
            printf "\nDone." ;;

        python) # build the directory for the python language
            builtin cd $DIRECTORY
            mkdir src
            mkdir docs
            mkdir tools
	   touch main.py
            touch tools/__init__.py
	   touch docs/notes.text
	   printf "\nCreating virtual environment..."
	   python -m venv .
            printf "\nDone." ;;

        c) # build the directory tree for the c language
            builtin cd $DIRECTORY
            mkdir src
            mkdir headers
	   mkdir docs
            touch main.c
	   touch docs/notes.text
            printf "\nDone." ;;

        cpp) # build the directory tree for the cpp language
            builtin cd $DIRECTORY
            mkdir src
            mkdir headers
	   mkdir docs
            touch main.cpp
	   touch docs/notes.text
            printf "\nDone." ;;
	
	bash)
		builtin cd $DIRECTORY
		mkdir bin
		mkdir docs
		mkdir etc
		touch LICENSE
		mkdir logs
		touch README.md
		touch setup.sh
		mkdir src
		touch docs/notes.text
		touch src/main.sh
		mkdir tmp
		mkdir var
		printf "\nDone." ;;
	rust)
		cargo new $DIRECTORY
		builtin cd $DIRECTORY
		mkdir docs
		mkdir tmp
		touch docs/README.md
		touch docs/notes.text
		printf "\nDone." ;;
    esac

    printf "\nCreated all directories."
    printf "\n\n"
    tree
}

#! Fix the error checking

LANG=/dev/null
DIR=/dev/null

if [ $1 ]; then

	if [[ "$1" == "-h" ]]; then
		printf "$HELP_MENU"
		exit
	fi
	if [[ "$1" == "help" ]]; then
		printf "$HELP_MENU"
		exit
	fi

	case $1 in
		python) LANG=$1 ;;
		html) LANG=$1 ;;
		c) LANG=$1 ;;
		cpp) LANG=$1 ;;
		bash) LANG=$1 ;;
		rust) LANG=$1 ;;
	esac

	if [[ $LANG = /dev/null  ]]; then
		printf "\nNo supported language provided.\nTry typing the name in lowercase characters.\n"
		exit
	fi

	if [ $2 ]; then
		DIR=$2
	else
		printf "\nNo directory provided.\n"
		exit
	fi

	create_dirs $LANG $DIR
else 
	printf "\nNo arguments provided"
	exit
fi
